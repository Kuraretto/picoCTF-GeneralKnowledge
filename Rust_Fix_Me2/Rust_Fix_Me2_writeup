Rust fixme 2

The Rust saga continues? I ask you, can I borrow that, pleeeeeaaaasseeeee?

hint 
https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html

using some help from ChatGPT to understand the code i found that 


fn decrypt(encrypted_buffer:Vec<u8>, borrowed_string: &String)

&String is an immutable borrow → you can’t push_str on it.

You need &mut String.

Mutability in main

let party_foul = String::from("Using memory unsafe languages is a: ");

This creates an immutable string.

You need let mut party_foul.

Returning early

if res.is_err() {
    return;
}

In Rust, you need to declare your function return type if you want to actually return something.

If you just want to stop and return nothing → declare the function as returning () (the default).

Or, more idiomatic → use match or ?.

this is the final modified code 

use xor_cryptor::XORCryptor;

fn decrypt(encrypted_buffer: Vec<u8>, borrowed_string: &mut String) {
    // Key for decryption
    let key = String::from("CSUCKS");

    // Editing our borrowed value
    borrowed_string.push_str("PARTY FOUL! Here is your flag: ");

    // Create decryption object
    let xrc = match XORCryptor::new(&key) {
        Ok(x) => x,
        Err(_) => return, // just stop if key setup fails
    };

    // Decrypt flag and print it out
    let decrypted_buffer = xrc.decrypt_vec(encrypted_buffer);
    borrowed_string.push_str(&String::from_utf8_lossy(&decrypted_buffer));
    println!("{}", borrowed_string);
}

fn main() {
    // Encrypted flag values
    let hex_values = [
        "41", "30", "20", "63", "4a", "45", "54", "76", "01", "1c", "7e", "59", "63", "e1", "61",
        "25", "0d", "c4", "60", "f2", "12", "a0", "18", "03", "51", "03", "36", "05", "0e", "f9",
        "42", "5b",
    ];

    // Convert the hexadecimal strings to bytes and collect them into a vector
    let encrypted_buffer: Vec<u8> = hex_values
        .iter()
        .map(|&hex| u8::from_str_radix(hex, 16).unwrap())
        .collect();

    let mut party_foul = String::from("Using memory unsafe languages is a: "); 
    decrypt(encrypted_buffer, &mut party_foul);
}

run this code using the "cargo run" cmd and you will get the decrypted flag 
 
